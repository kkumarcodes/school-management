"""
Django settings for schoolnet project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path
import sys
from socket import gethostname, gethostbyname
from datetime import timedelta
from dotenv import load_dotenv

load_dotenv()

ENV = os.environ.get("ENV", "staging")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-k8ed9#vtc+7323fsde2!h8tvra)fmfujw+jwzk$wyessssfff)'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    'localhost',
    'backend',
    'frontend',
    '127.0.0.1',
]


# Application definition

INSTALLED_APPS = [
    "sncelery",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt.token_blacklist',
    "rest_framework.authtoken",
    'corsheaders',
    'snuniversities',
    'snusers',
    'sncommon',
    'sncounseling',
    'snmessages',
    'snnotifications',
    'snresources',
    'sntasks',
    'sntutoring',
    "django_celery_beat",  # Period docs with UI
    "django_celery_results",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.TokenAuthentication",
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ]
}

SIMPLE_JWT = {
     'ACCESS_TOKEN_LIFETIME': timedelta(minutes=10),
     'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
     'ROTATE_REFRESH_TOKENS': True,
     'BLACKLIST_AFTER_ROTATION': True
}

CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',
]
ROOT_URLCONF = 'schoolnet.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'schoolnet.wsgi.application'

EMAIL_BACKEND = "anymail.backends.amazon_ses.EmailBackend"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ["DB_NAME"],
        "USER": os.environ["DB_USER"],
        "PASSWORD": os.environ["DB_PASSWORD"],
        "HOST": os.environ["DB_HOST"],
        "PORT": "5432",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Celery Configuration Options
CELERY_TIMEZONE = "Australia/Tasmania"
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60


MAGENTO_API_BASE = "https://hello-staging.collegewise.com"
MAGENTO_API_USERNAME = os.environ.get("MAGENTO_API_USERNAME", "stagingapi")
MAGENTO_API_PASSWORD = os.environ.get("MAGENTO_API_PASSWORD")

# Settings for MS Azure App (for Outlook calendar integration)
MS_APP_SECRET = os.environ.get("MS_APP_SECRET")
MS_APP_ID = "xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx"

# Zoom Keys
ZOOM_API_JWT = os.environ.get("ZOOM_API_JWT")

# Hubspot Credentials
HUBSPOT_APP_ID = os.environ.get("HUBSPOT_APP_ID")
HUBSPOT_APP_SECRET = os.environ.get("HUBSPOT_APP_SECRET")
HUBSPOT_CREDENTIALS = os.path.join(BASE_DIR, "hubspot_credentials.json")
# Must override this in settings files, when we can get SITE_URL
HUBSPOT_REDIRECT_URI = ""
SITE_URL = os.environ.get("SITE_URL", "http://localhost:8000")
LOGIN_LINK_SITE_URL = os.environ.get("LOGIN_SITE_URL", SITE_URL)

""" Testing and DevOps Settings """
TEST_RUNNER = "django_nose.NoseTestSuiteRunner"
INSTALLED_APPS += ("django_nose",)
TESTING = sys.argv[1:2] == ["test"]

# Username of user Prompt will be authenticated as when using API
PROMPT_USERNAME = os.environ.get("PROMPT_USERNAME", "prompt")
# Details we use to access Prompt
PROMPT_API_BASE = os.environ.get("PROMPT_API_BASE", "https://content-staging.prompt.com")
PROMPT_URL_BASE = os.environ.get("PROMPT_URL_BASE", PROMPT_API_BASE)
PROMPT_API_USERNAME = os.environ.get("PROMPT_API_USERNAME", "schoolnet")
PROMPT_API_PASSWORD = os.environ.get("PROMPT_API_PASSWORD", "schoolnet")
PROMPT_API_TOKEN = os.environ.get("PROMPT_API_TOKEN")
